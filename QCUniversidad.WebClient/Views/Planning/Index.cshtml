@model PlanningIndexModel

@{
    ViewData["Title"] = "Planificación";

    bool planningItemCreated = (bool?)TempData["planItem-created"] ?? false;
    bool planningItemEdited = (bool?)TempData["planItem-edited"] ?? false;
    bool planningItemDeleted = (bool?)TempData["planItem-deleted"] ?? false;
}

@if (planningItemCreated)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <strong><span class="fa fa-info-circle"></span> Elemento de planificación creado</strong> Se ha creado un nuevo elemento de planificación satisfactoriamente.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (planningItemEdited)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <strong><span class="fa fa-pencil-square"></span> Elemento de planificación editado</strong> Se ha editado un elemento de planificación satisfactoriamente.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (planningItemDeleted)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <strong><span class="fa fa-trash-can"></span> Elemento de planificación eliminado</strong> Se ha eliminado un elemento de planificación satisfactoriamente.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<h1>Planificación docente</h1>
<hr />

<dl class="row">
    <dt class="col-sm-3">Año escolar</dt>
    <dd class="col-sm-9">@Model.SchoolYear?.Name</dd>

    <dt class="col-sm-3">Matrícula</dt>
    <dd class="col-sm-9">@Model.SchoolYear?.Description</dd>
</dl>

<div class="row mt-3 mb-3">
    <div class="col col-lg-3 col-sm-6 col-12">
        <label for="selectedPeriod">Período</label>
        <select asp-for="PeriodSelected" class="form-select" aria-label="Seleccionar período" id="selectedPeriod" onchange="PeriodSelected()">
            @foreach (var period in Model.Periods)
            {
                <option value="@period.Id">@period.Starts.ToString("dd-MM-yyyy") - @period.Ends.ToString("dd-MM-yyyy")</option>
            }
        </select>
    </div>
</div>

<div class="row">
    <div class="col d-flex justify-content-center" id="planningContent">
        <div class="spinner-grow m-5" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/popper/popper.min.js"></script>
    <script>
        var periodToSelect = '@(Model.PeriodSelected is null ? "" : Model.PeriodSelected.ToString())';
        var deleteModal = null;
        var requestingDelete = false;

        $(document).ready(function () {
            PeriodSelected();
        });

        function LoadTooltips() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        function CallNewElementPage() {
            const periodsSelect = document.getElementById("selectedPeriod");
            let selected = periodsSelect.options[periodsSelect.selectedIndex].value;
            if (selected != null && selected != '') {
                location.href = "/planning/createplanningitem?periodId=" + selected;
            }
        }

        function PeriodSelected() {
            const periodsSelect = document.getElementById("selectedPeriod");
            let selected = periodsSelect.options[periodsSelect.selectedIndex].value;
            SetLoadingPlanning();

            $.ajax({
                url: `/planning/GetPlanningViewForPeriod?periodId=${selected}`,
                type: "GET",
                success: function (data) {
                    DisableLoadingPlanning();
                    const planningDetailsDiv = document.getElementById("planningContent");
                    planningDetailsDiv.innerHTML = data;
                    deleteModal = new bootstrap.Modal(document.getElementById('deletePlanItemModal'), { keyboard: true });
                    LoadTooltips();
                },
                error: function (xhr, status, error) {
                    DisableLoadingPlanning();
                    console.log(xhr, status, error);
                }
            });

            LoadTooltips();

            console.log("periods select changed", periodsSelect.selectedIndex, selected);
        }

        function GetYearNumber(yearNumber) {
            switch (yearNumber) {
                case 1:
                    return "1er año";
                case 2:
                    return "2do año";
                case 3:
                    return "3er año";
                case 4:
                    return "4to año";
                case 5:
                    return "5to año";
                case 6:
                    return "6to año";
                case 7:
                    return "7to año";
                case 8:
                    return "8vo año";
                default:
                    return yearNumber;
            }
        }

        function GetTeachingModality(modality) {
            switch (modality) {
                case 0:
                    return "Curso regular diurno";
                case 1:
                    return "Curso por encuentros";
                case 2:
                    return "Curso a distancia";
                case 3:
                    return "Postgrado";
                case 4:
                    return "Maestría";
                case 5:
                    return "Doctorado";
                default:
                    return modality;
            }
        }

        function getStringDate(date) {
            let formatedDate = `${date.getDate() < 10 ? "0" + date.getDate() : date.getDate()}-${(date.getMonth() + 1) < 10 ? "0" + (date.getMonth() + 1) : (date.getMonth() + 1)}-${date.getFullYear()}`;
            return formatedDate;
        }

        function CreateSpinnerNode() {
            let spinnerNode = document.createElement("div");
            spinnerNode.classList.add("spinner-grow");
            spinnerNode.classList.add("m-5");
            spinnerNode.role = "status";
            let spinnerSpan = document.createElement("span");
            spinnerSpan.classList.add("visually-hidden");
            spinnerSpan.innerText = "Loading...";
            spinnerNode.appendChild(spinnerSpan);
            return spinnerNode;
        }

        function SetLoadingPlanning() {
            const planningDetailsDiv = document.getElementById("planningContent");
            planningDetailsDiv.innerHTML = "";
            planningDetailsDiv.appendChild(CreateSpinnerNode());
            const periodsSelect = document.getElementById("selectedPeriod");
            periodsSelect.disabled = true;
        }

        function DisableLoadingPlanning() {
            const planningDetailsDiv = document.getElementById("planningContent");
            planningDetailsDiv.innerHTML = "";
            const periodsSelect = document.getElementById("selectedPeriod");
            periodsSelect.disabled = false;
        }

        function FilterChanged() {
            const subjectFilterSelect = document.getElementById("filterSubjects");
            let subjectSelected = subjectFilterSelect.options[subjectFilterSelect.selectedIndex].value;
            const typeFilterSelect = document.getElementById("activityFilter");
            let typeSelected = typeFilterSelect.options[typeFilterSelect.selectedIndex].innerText;
            let itemsRows = document.getElementById("planningItemsTable").getElementsByTagName("tbody")[0].getElementsByTagName("tr");
            let totalShowed = 0;
            for (let i = 0; i < itemsRows.length; i++) {
                let row = itemsRows[i];
                row.style.visibility = "visible";
                let allTd = row.getElementsByTagName("td");
                let subjectTd = allTd[0];
                let typeTd = allTd[1];
                if (((subjectSelected == "all") || (subjectTd.id == subjectSelected)) && ((typeSelected == "Todos") || (typeTd.innerText.indexOf(typeSelected) >= 0))) {
                    let totalHours = allTd[4].innerText;
                    totalShowed = totalShowed + parseFloat(totalHours);
                } else {
                    row.style.visibility = "collapse";
                }
            }
            let totalCell = document.getElementById("totalCell");
            totalCell.removeChild(totalCell.children[0]);
            let resultNode = document.createElement("b");
            resultNode.innerText = totalShowed;
            totalCell.appendChild(resultNode);
        }

        function RiseDeleteModal(id) {
            SetDeleteModalTextContent("¿Esta seguro que desea eliminar el elemento?");
            var button = document.getElementById("modal-delete-primarybutton");
            button.onclick = function () {
                SendDeletePlanItemRequest(id);
            };
            deleteModal.show();
        }

        function SendDeletePlanItemRequest(id) {
            if (!requestingDelete) {
                requestingDelete = true;
                HideCreateModalButtons();
                ShowCreateModalSpinner();
                var xhttp = new XMLHttpRequest();
                xhttp.open("DELETE", "/planning/DeletePlanningItem?id=" + id, true);
                xhttp.setRequestHeader("Content-Type", "application/json");
                xhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        // Response
                        var response = this.responseText;
                        console.log(response);
                        deleteModal.hide();
                        location.reload();
                    }
                    requestingDelete = false;
                    ShowCreateModalButtons();
                    HideCreateModalSpinner();
                };
                xhttp.send();
            }
        }

        function SetDeleteModalTextContent(value) {
            var content = document.getElementById('modal-delete-content');
            content.innerHTML = value;
        }

        function HideCreateModalButtons() {
            var footer = document.getElementById('deleteModalFooter');
            var buttons = footer.getElementsByTagName("button");
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].hidden = true;
            }
        }

        function ShowCreateModalButtons() {
            var footer = document.getElementById('deleteModalFooter');
            var buttons = footer.getElementsByTagName("button");
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].hidden = false;
            }
        }

        function ShowCreateModalSpinner() {
            var spinner = document.getElementById("deleteModalLoadingSpinner");
            spinner.hidden = false;
        }

        function HideCreateModalSpinner() {
            var spinner = document.getElementById("deleteModalLoadingSpinner");
            spinner.hidden = true;
        }
    </script>
}